import { Telegraf } from 'telegraf';

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN || '');

// –û—Ç–≤–µ—Ç –Ω–∞ /start
bot.start(async (ctx) => {
  await ctx.reply('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ feelFree VPN!\n–ù–∞–∂–º–∏—Ç–µ "–ü–æ–ª—É—á–∏—Ç—å VPN", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.');
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
    reply_markup: {
      keyboard: [
        ['‚úàÔ∏è –ü–æ–ª—É—á–∏—Ç—å VPN'],
        ['üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å'],
        ['üí≥ –û–ø–ª–∞—Ç–∞'],
      ],
      resize_keyboard: true,
      one_time_keyboard: false,
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
bot.on('text', async (ctx) => {
  await ctx.reply(`–í—ã —Å–∫–∞–∑–∞–ª–∏: ${ctx.message.text}`);
});

// –ù—É–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å bodyParser
export const config = {
  api: {
    bodyParser: false,
  },
};

// Webhook endpoint
export async function POST(request: Request) {
  const body = await request.json();

  try {
    await bot.handleUpdate(body);
  } catch (error) {
    console.error('Error processing webhook:', error);
    return new Response('Error processing webhook', { status: 500 });
  }
  return new Response("ok", { status: 200 });
}

export async function GET() {
  return new Response("Webhook route is working!", { status: 200 });
}